<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Stock-Mapper">

	<sql id="order">
		<if test="searchType == 'in_ymd'.toString()">
			ORDER BY iv.in_ymd DESC
		</if>
		<if test="searchType == 'inv_loc_desc'.toString()">
			ORDER BY inv_loc DESC
		</if>
		<if test="searchType == 'inv_loc'.toString()">
			ORDER BY inv_loc
		</if>
	</sql>
	<sql id="coOrder">
		<if test="searchType == ''.toString()">
			ORDER BY plan_ymd DESC
		</if>
		<if test="searchType == 'real_date'.toString()">
			ORDER BY real_date DESC
		</if>
		<if test="searchType == 'req_ymd'.toString()">
			ORDER BY req_ymd DESC
		</if>
		<if test="searchType == 'type'.toString()">
			ORDER BY type
		</if>
		<if test="searchType == 'type_desc'.toString()">
			ORDER BY type DESC
		</if>
	</sql>
	
	<sql id="coSearch">
		<if test="searchType == 'cl_name'.toString()">
			where cl_name like '%'||#{keyword}||'%'
		</if>
		<if test="searchType == 'barcode'.toString()">
			where barcode like '%'||#{keyword}||'%'
		</if>
		<if test="searchType == 'item_name'.toString()">
			where item_name like '%'||#{keyword}||'%'
		</if>
		<if test="searchType == 'item_no'.toString()">
			where item_no like '%'||#{keyword}||'%'
		</if>
	</sql>
	<sql id="search">
		<if test="searchType == 'cl_name'.toString()">
			and cl_name like '%'||#{keyword}||'%'
		</if>
		<if test="searchType == 'item_no'.toString()">
			and item_no like '%'||#{keyword}||'%'
		</if>
		<if test="searchType == 'item_name'.toString()">
			and item_name like '%'||#{keyword}||'%'
		</if>
		<if test="searchType == 'bfr_loc'.toString()">
			and bfr_loc like '%'||#{keyword}||'%'
		</if>
	</sql>
	
	<!-- 물류센터별 재고 목록 -->
	<select id="selectStockList" resultType="stockList">
		SELECT a.*, it.item_name, st.std_name, rownum
		FROM (SELECT iv.item_no, cl.cl_name, sum(iv.inv_qty) inv_qty
				FROM inventory iv, client cl
				WHERE wh_code = #{wh_code} AND iv.co_code = cl.cl_code AND iv.sts_code = 'IS001'
				GROUP BY iv.item_no, cl.cl_name) a, item it, standard st
		WHERE a.item_no = it.item_no and it.std_no = st.std_no
		<include refid="search"/>	
	</select>
	
	<!-- 물류센터 품목번호 별 재고 상세 목록 -->
	<select id="selectListByItemNo" parameterType="java.util.Map" resultType="stockList">
		SELECT rownum, a.*
        FROM (
        SELECT iv.inv_no, iv.item_no, item_name, st.std_name, concat(wz.wz_loc, SUBSTR(iv.inv_loc, INSTR(iv.inv_loc,'-'))) inv_loc, inv_qty,TO_CHAR(TO_DATE(iv.in_ymd,'YYYYMMDD'),'YYYY-MM-DD') in_ymd, wh_mngr reg_name
		FROM inventory iv, wh_zone wz, item it, standard st, order_item oi, in_order od
		WHERE wz.wz_no in (
			SELECT SUBSTR(inv_loc,0,INSTR(inv_loc, '-')-1)
			FROM inventory) and iv.oi_no = oi.oi_no and oi.ord_no = od.ord_no and iv.wh_code = wz.wh_code and iv.item_no = it.item_no and it.std_no = st.std_no and iv.wh_code = #{wh_code} and iv.item_no = #{item_no} and iv.sts_code = 'IS001' <include refid="order"/> ) a
	</select>
	
	<!-- 기업 재고 목록 -->
	<select id="selectCoStockList" parameterType="str" resultType="stockList">
		SELECT c.*, cl.cl_name, rownum
		FROM (
			SELECT a.*, nvl(b.inv_qty,0) inv_qty, wh_code
			FROM(
				SELECT item_no, item_name, std_name, barcode
				FROM item it, standard st
				WHERE it.co_code = #{co_code} and st.std_no = it.std_no) a left outer join
				(SELECT item_no, sum(inv_qty) inv_qty, wh_code
				FROM inventory
				WHERE item_no in (
					SELECT item_no
					FROM item it
					WHERE it.co_code = #{co_code})
					GROUP BY item_no, wh_code) b
					ON( a.item_no = b.item_no)) c LEFT OUTER JOIN client cl
				ON(c.wh_code = cl.cl_code)
		<include refid="coSearch"/>
	</select>
	<!-- 기업 재고 상세 이력 -->
	<select id="selectCoStockHistory" parameterType="java.util.Map" resultType="stockDetail">
		SELECT rownum, aa.*
		FROM(
			SELECT *
			FROM(
				SELECT a.item_no, '입고' as type, a.cm_name, io.req_ymd, io.deli_ymd plan_ymd, in_ymd real_date, a.qty req_qty, a.in_qty real_qty,ord_mngr reg_name
				FROM(
					SELECT oi_no, cm.cm_name, oi.ord_no, oi.qty, oi.in_qty, oi.item_no
					FROM order_item oi, cm_code cm
				WHERE ord_no IN (
					SELECT ord_no
					FROM in_order
					WHERE co_code = #{co_code} and wh_code = #{wh_code}) and item_no = #{item_no}
					and oi.sts_code = cm.cm_code) a, in_order io
				WHERE a.ord_no = io.ord_no
		UNION ALL
			SELECT it.item_no, '출고' as type, cc.cm_name, ri.reg_ymd req_ymd, rl.plan_ymd, rls_ymd real_date, ri.plan_qty req_qty, ri.rls_qty real_qty,ri.reg_name
			FROM rls_item ri, release rl, cm_code cc, item it
			WHERE ri.rls_no =rl.rls_no and rl.sts_code = cc.cm_code and it.item_no = ri.item_no and it.item_no = #{item_no} and rl.wh_code = #{wh_code}
		UNION ALL
			SELECT a.item_no, '실사' as type, '-' as cm_name, a.chk_ymd as req_ymd, a.chk_ymd as plan_ymd, a.chk_ymd as real_date, a.chk_qty req_qty, a.real_qty real_qty, '-' reg_name
			FROM (
		    	SELECT chk_ymd, sum(chk_qty) chk_qty, sum(chk_qty) - sum(cur_qty) real_qty, item_no
		    	FROM inventory iv, inv_check ic
		    WHERE iv.inv_no = ic.inv_no and item_no = #{item_no} and chk_ymd is not null
		    GROUP BY chk_ymd, item_no)a )
		<include refid="coOrder"/>) aa
	</select>
	<!-- 물류센터 재고 실사 이력 -->
	<select id="selectStockCheckList" resultType="stockCheck">
		SELECT rownum, b.*, c.tot_qty
        FROM (
            SELECT a.chk_no, TO_CHAR(TO_DATE(a.chk_ymd,'YYYYMMDD'),'YYYY-MM-DD') chk_ymd, a.item_no, item_name, std_name, cur_qty, chk_qty, chng_qty, wz2.wz_loc || '-' || wz1.wz_loc || SUBSTR(bfr_loc, INSTR(bfr_loc,'-')) bfr_loc, rsn_code, a.reg_name, a.upd_yn, cl_name, inv_no, a.co_code
            FROM(
                SELECT ic.chk_no, ic.chk_ymd, it.item_no, item_name, std_name, cur_qty, chk_qty, (cur_qty-chk_qty) chng_qty, bfr_loc, rsn_code, ic.reg_name, ic.upd_yn, cl_name, iv.inv_no, iv.co_code
                FROM inv_check ic, inventory iv, item it, standard st, client cl
                WHERE ic.inv_no = iv.inv_no and iv.wh_code = #{wh_code} and iv.item_no = it.item_no and it.std_no = st.std_no and iv.co_code = cl.cl_code) a, wh_zone wz1, wh_zone wz2
            WHERE SUBSTR(bfr_loc,0,INSTR(bfr_loc, '-')-1) = wz1.wz_no and wz1.up_no = wz2.wz_no
            ORDER BY upd_yn, chk_ymd DESC ) b, (SELECT sum(inv_qty) tot_qty, co_code, item_no FROM inv_check ic, inventory iv WHERE ic.inv_no = iv.inv_no and iv.wh_code = #{wh_code} GROUP BY item_no, co_code) c 
		WHERE b.co_code = c.co_code and b.item_no = c.item_no <include refid="search"/>
	</select>
	<!-- 실사 결과 위치 및 수량 변경시 재고 분리하여 재고테이블에 등록 -->
	<insert id="insertInvFromCheck">
		INSERT INTO inventory (inv_no, item_no, co_code, inv_loc, wh_code, inv_qty, sts_code, oi_no, in_ymd)
			SELECT inv_seq.nextval, item_no, co_code, bfr_loc, iv.wh_code, chk_qty, 'IS001', iv.oi_no, iv.in_ymd
			FROM inv_check ic, inventory iv
			WHERE ic.inv_no = iv.inv_no and ic.chk_no = #{chk_no}
	</insert>
	<!-- 실사 결과 위치 및 수량 변경시 분리된 만큼 기존 재고 수량 수정 -->
	<update id="updateInvQtyByDiv">
		UPDATE inventory iv
		SET inv_qty = (SELECT (ic.cur_qty - ic.chk_qty) as inv_qty FROM inv_check ic WHERE ic.chk_no=#{chk_no})
		WHERE EXISTS ( SELECT 1 FROM inv_check ic WHERE iv.inv_no = ic.inv_no and ic.chk_no = #{chk_no})
	</update>
	<!-- 실사 결과 수량만 변동시 -->
	<update id="updateInvQtyByCheck">
		UPDATE inventory iv
		SET inv_qty = (SELECT ic.chk_qty as inv_qty FROM inv_check ic WHERE ic.chk_no=#{chk_no})
		WHERE EXISTS ( SELECT 1 FROM inv_check ic WHERE iv.inv_no = ic.inv_no and ic.chk_no = #{chk_no})
	</update>
	<!-- 실사 결과 위치만 변동시 -->
	<update id="updateInvLocByCheck">
		UPDATE inventory iv
		SET inv_loc = (SELECT ic.bfr_loc as inv_loc FROM inv_check ic WHERE ic.chk_no=#{chk_no})
		WHERE EXISTS ( SELECT 1 FROM inv_check ic WHERE iv.inv_no = ic.inv_no and ic.chk_no = #{chk_no})
	</update>
	<!-- 실사 확인시 재고 적용 여부 표시 -->
	<update id="updateUpdYN">
		UPDATE inv_check
		SET upd_yn = 'Y' 
		WHERE chk_no = #{chk_no}
	</update>
</mapper>


			