package com.spring.AtoZ.mobile.dao;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator;

import com.spring.AtoZ.mobile.dto.InvCheckCommand;
import com.spring.AtoZ.picking.dto.PickingCommand;
import com.spring.AtoZ.strategy.dto.StrategyStockCommand;
import com.spring.AtoZ.vo.AttendanceVO;
import com.spring.AtoZ.vo.EmployeeVO;

public class MobileDAOImpl implements MobileDAO{
	private SqlSession sqlSession;
	public void setSqlSession(SqlSession sqlSession) { 
		this.sqlSession = sqlSession;
	}
	@Override
	public EmployeeVO selectEmployee(String id) throws SQLException {
		EmployeeVO employee = null;
		employee = sqlSession.selectOne("Mobile-Mapper.selectEmployee", id);
		return employee;
	}
	@Override
	public AttendanceVO selectYesterdayCheck(String id) throws SQLException {
		AttendanceVO resultVO = null;
		resultVO = sqlSession.selectOne("Mobile-Mapper.selectYesterdayCheck", id);
		return resultVO;
	}
	@Override
	public AttendanceVO selectAttndCheck(String id) throws SQLException {
		AttendanceVO resultVO = null;
		resultVO = sqlSession.selectOne("Mobile-Mapper.selectAttndCheck", id);
		return resultVO;
	}
	@Override
	public void insertAttnd(String id) throws SQLException {
		sqlSession.update("Mobile-Mapper.insertAttnd", id);
	}
	@Override
	public void updateAttnd(Map<String, Object> map) throws SQLException {
		sqlSession.update("Mobile-Mapper.updateAttnd", map);
	}
	@Override
	public Map<String, Object> selectReceiveItem(int inv_no) throws SQLException {
		Map<String, Object> dataMap = sqlSession.selectOne("Mobile-Mapper.selectReceiveItem", inv_no);
		return dataMap;
	}
	@Override
	public void updateInventory(int inv_no, String inv_loc) throws SQLException {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("inv_no", inv_no);
		dataMap.put("inv_loc", inv_loc);
		sqlSession.update("Mobile-Mapper.updateInventory", dataMap);
	}
	@Override
	public void updateInOrder(int inv_no, String emp_name) throws SQLException {
		Map<String, Object> dataMap = new HashMap<>();
		dataMap.put("inv_no", inv_no);
		dataMap.put("emp_name", emp_name);
		sqlSession.update("Mobile-Mapper.updateInOrder", dataMap);
	}
	@Override
	public void updateOrderItem(int inv_no, int in_qty) throws SQLException {
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("inv_no", inv_no);
		dataMap.put("in_qty", in_qty);
		sqlSession.update("Mobile-Mapper.updateOrderItem", dataMap);
	}
	
	// 피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹
	
	@Override
	public PickingCommand selectPickingByNo(PickingCommand pick) throws SQLException {
		PickingCommand com = sqlSession.selectOne("Mobile-Mapper.selectPickingByNo");
		return com;
	}
	
	@Override
	public void updatePickingQnS(PickingCommand comm) throws SQLException{
		sqlSession.update("Mobile-Mapper.updatePickingQnS",comm);
	}
	@Override
	public List<PickingCommand> selectPickingList(String rls_no) throws SQLException {
		List<PickingCommand> list = sqlSession.selectList("Picking-Mapper.selectPickingList", rls_no); 
		return list;
	}
	// 피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹  피킹
	
	// 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실

	@Override
	public InvCheckCommand selectInvCheck(InvCheckCommand icc) throws SQLException {
		InvCheckCommand check = sqlSession.selectOne("Mobile-Mapper.selectInvCheck",icc);
		return check;
	}
	@Override
	public void insertInvCheck(InvCheckCommand icc) throws SQLException {
		sqlSession.update("Mobile-Mapper.insertInvCheck", icc);
	}
	@Override
	public void updateInvCheck(InvCheckCommand icc) throws SQLException {
		sqlSession.update("Mobile-Mapper.updateInvCheck", icc);
		
	}
	@Override
	public List<InvCheckCommand> selectInvCheckList(String inv_loc) throws SQLException {
		List<InvCheckCommand> list = sqlSession.selectList("Mobile-Mapper.selectInvCheckList", inv_loc);
		return list;
	}
	@Override
	public List<InvCheckCommand> selectStockList(String inv_loc) throws SQLException {
		List<InvCheckCommand> list = sqlSession.selectList("Mobile-Mapper.selectStockList", inv_loc);
		return list;
	}
	@Override
	public void insertInvCheckList(List<StrategyStockCommand> stockList) throws SQLException {
		sqlSession.update("Mobile-Mapper.insertInvCheckList", stockList);
		
	}
	@Override
	public int selectInvCheckCount(String inv_loc) throws SQLException {
		int cnt = sqlSession.selectOne("Mobile-Mapper.selectInvCheckCount", inv_loc);
		return cnt;
	}
	@Override
	public InvCheckCommand selectStock(String inv_no) throws SQLException {
		InvCheckCommand comm = sqlSession.selectOne("Mobile-Mapper.selectStock", inv_no);
		return comm;
	}
	
	// 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실사 실
	
}








