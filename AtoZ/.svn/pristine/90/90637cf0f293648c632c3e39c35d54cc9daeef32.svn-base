package com.spring.AtoZ.serviceUse.controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus; 
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.spring.AtoZ.common.dto.SearchMap;
import com.spring.AtoZ.member.dto.DetailMemberCommand;
import com.spring.AtoZ.serviceUse.dto.ApproveClient;
import com.spring.AtoZ.serviceUse.dto.BeforeFindPwdCommand;
import com.spring.AtoZ.serviceUse.dto.COClient;
import com.spring.AtoZ.serviceUse.dto.ChangePwdCommand;
import com.spring.AtoZ.serviceUse.dto.WHClient;
import com.spring.AtoZ.serviceUse.service.ServiceUseService;
import com.spring.AtoZ.vo.ClientVO;
import com.spring.AtoZ.vo.WHPictureVO;

@Controller
public class ServiceUseController {

	@Autowired
	ServiceUseService serviceUseService;
	
	@Inject
	BCryptPasswordEncoder passwordEncoder;
	
	@Resource(name="whpictureUploadPath")
	private String whpictureUploadPath;
	
	//로그인폼 이동
	@RequestMapping("/serviceUse/loginForm")
	public String loginForm(@RequestParam(defaultValue="") String error, HttpServletResponse response) throws Exception{
		String url = "serviceUse/login";
		
		return url;
	}
	
	//이용약관
	@RequestMapping("/serviceUse/termsOfService")
	public String termsOfService() {
		String url = "serviceUse/termsOfService";
		
		return url;
	}
	
	// 이용신청
	@RequestMapping(value="/serviceUse/registForm", method=RequestMethod.GET)
	public ModelAndView serviceRegistForm(@RequestParam(value="agree", defaultValue="false") Boolean agree, HttpServletResponse response, String checked)throws Exception {
		if(!agree) {
			ModelAndView mnv = new ModelAndView("serviceUse/termsOfService");
			
			return mnv;
		}
		ModelAndView mnv = new ModelAndView();
		if(checked.equals("1")) {
			mnv.setViewName("/serviceUse/registCO");
		}
		if(checked.equals("2")) {
			mnv.setViewName("/serviceUse/registWH");
		}
		if(checked.equals("3")) {
			mnv.setViewName("/serviceUse/registWHCO");
		}
		mnv.addObject("Client", new ClientVO());
		return mnv;
	}

	//기업회원등록
	@RequestMapping(value="/serviceUse/COregist", method=RequestMethod.POST)
	public void serviceCORegist(COClient COclient,HttpServletRequest request, HttpServletResponse response) throws SQLException,IOException {
		
		String encryptPassword = passwordEncoder.encode(COclient.getCl_pwd());
		COclient.setCl_pwd(encryptPassword);
		serviceUseService.registCOClient(COclient);
		
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		out.println("<script>");
		out.println("alert('회원등록이 정상적으로 되었습니다.')");
		out.println("location.href='"+request.getContextPath()+"/homepage/home';");
		out.println("</script>");
		out.close();

	}
	
	//물류센터등록
	@RequestMapping(value="/serviceUse/WHregist", method=RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public void serviceWHRegist(WHClient whclient, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		List<WHPictureVO> whPictureList = savePicture(whclient);
		ClientVO client = whclient.toWHClient();
		client.setWhPictureList(whPictureList);
		String encryptPassword = passwordEncoder.encode(client.getPwd());
		client.setPwd(encryptPassword);
		serviceUseService.registWHClient(client);
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		out.println("<script>");
		out.println("alert('회원등록이 정상적으로 되었습니다.')");
		out.println("location.href='"+request.getContextPath()+"/homepage/home';");
		out.println("</script>");
		out.close();
		
		model.addAttribute("whPictureList", whPictureList);
	}
		
	//기업+물류센터등록
	@RequestMapping(value="/serviceUse/WHCOregist", method=RequestMethod.POST, produces = "text/plain;charset=utf-8")
	public void serviceWHCORegist(WHClient whclient, Model model, HttpServletRequest request, HttpServletResponse response) throws Exception {
		List<WHPictureVO> whPictureList = savePicture(whclient);
		ClientVO client = whclient.toWHClient();
		client.setWhPictureList(whPictureList);
		String encryptPassword = passwordEncoder.encode(client.getPwd());
		client.setPwd(encryptPassword);
		serviceUseService.registWHClient(client);
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		out.println("<script>");
		out.println("alert('회원등록이 정상적으로 되었습니다.')");
		out.println("location.href='"+request.getContextPath()+"/homepage/home';");
		out.println("</script>");
		out.close();
		
		model.addAttribute("whPictureList", whPictureList);
	}
	
	//이미지 파일 저장
	private List<WHPictureVO> savePicture(WHClient whclient) throws Exception {
		String whpictureUploadPath = this.whpictureUploadPath;
		
		List<WHPictureVO> whPictureList = new ArrayList<WHPictureVO>();
		
		if(whclient.getPicture() != null) {
			for(MultipartFile multi : whclient.getPicture()) {
				String fileName = UUID.randomUUID().toString().replace("-", "")+"$$"+multi.getOriginalFilename();
				File target = new File(whpictureUploadPath, fileName);
				
				if(!target.exists()) {
					target.mkdirs();
				}
				
				multi.transferTo(target);
				
				WHPictureVO whPicture = new WHPictureVO();
				whPicture.setPic_name(fileName);
				whPictureList.add(whPicture);
			}
		}
		return whPictureList;
	}
	
	//아이디 중복확인
	@RequestMapping(value="/serviceUse/idCheck", method=RequestMethod.POST)
	@ResponseBody
	//REST방식이라 어드바이서가 필요없이 여기서 처리해야 한다.
	public ResponseEntity<String> idCheck(String id, HttpServletRequest request) {
		ResponseEntity<String> entity = null;
		
		ClientVO client;
		try {
			client = serviceUseService.getClient(id);
			entity = new ResponseEntity<String>(client == null ? id : "", HttpStatus.OK);
		} catch (SQLException e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}

	@RequestMapping("/SY/serviceUse/useList")
	public ModelAndView memberList(ModelAndView mnv, SearchMap sm, @RequestParam(defaultValue="") String searchType, @RequestParam(defaultValue="") String keyword) throws Exception{
		String url = "serviceUse/useList.frame";
		
		sm.put("searchType", searchType);
		sm.put("keyword", keyword);
		sm.setUrl("/SY/serviceUse/useList");
		Map<String, Object> dataMap = serviceUseService.getClientList(sm);
		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);
		return mnv;
	}
	
	@RequestMapping("/SY/serviceUse/companyDetail")
	@ResponseBody
	public ResponseEntity<DetailMemberCommand> companyDetail(String cl_code) throws Exception {
		DetailMemberCommand client = serviceUseService.getUseClient(cl_code);
		return new ResponseEntity<DetailMemberCommand>(client,HttpStatus.OK);
	}
	
	
	@RequestMapping("/SY/serviceUse/warehouseDetail")
	@ResponseBody
	public ResponseEntity<DetailMemberCommand> warehouseDetail(String cl_code) throws Exception {
		DetailMemberCommand client = serviceUseService.getUseClient(cl_code);
		return new ResponseEntity<DetailMemberCommand>(client,HttpStatus.OK);
	}
	
	@RequestMapping("/SY/serviceUse/comwareDetail")
	@ResponseBody
	public ResponseEntity<DetailMemberCommand> comwareDetail(String cl_code) throws Exception {
		DetailMemberCommand client = serviceUseService.getUseClient(cl_code);
		return new ResponseEntity<DetailMemberCommand>(client,HttpStatus.OK);
	}
	
	@RequestMapping(value="/SY/serviceUse/approve", method=RequestMethod.POST)
	@ResponseBody
	public void approve(ApproveClient approveClient, HttpServletResponse response, HttpServletRequest request) throws SQLException, IOException {
		serviceUseService.approveClient(approveClient);
		response.setContentType("text/html; charset=utf-8");
		PrintWriter out = response.getWriter();
		out.println("<script>");
		out.println("alert('정상적으로 승인되었습니다.');");
		out.println("location.href='"+request.getContextPath()+"/index/SY004';");
		out.println("</script>");
		out.close();
		
	}
	
//---------------------------------영섭------------------------------------------------------------
	@RequestMapping("/serviceUse/findIdPwd")
	public ModelAndView findIdPwd(ModelAndView mnv) throws Exception {
		String url ="serviceUse/findIdPwd";
		
		mnv.setViewName(url);
		return mnv;
	}
	
	@ResponseBody
	@RequestMapping("/serviceUse/findId")
	public ResponseEntity<String> findId(String cl_regno) throws Exception {
		String cl_id = serviceUseService.findClientId(cl_regno);
		return new ResponseEntity<String>(cl_id,HttpStatus.OK);
	}
	
	@ResponseBody
	@RequestMapping("/serviceUse/findPwd")
	public void findPwd(String cl_id, String cl_regno, String cl_email, HttpServletResponse response, HttpServletRequest request) throws Exception{
		BeforeFindPwdCommand clCommand = new BeforeFindPwdCommand();
		clCommand.setCl_id(cl_id);
		clCommand.setCl_regno(cl_regno);
		clCommand.setCl_email(cl_email);
		ClientVO client = serviceUseService.confirmInformation(clCommand, request);
		response.setContentType("text/plain; charset=utf-8");
		PrintWriter out = response.getWriter();
		if(client != null) {
			out.print("이메일 전송에 성공하였습니다.");
			out.close();
		}else {
			out.print("이메일 전송에 실패하였습니다.");
			out.close();
		}
	}

	@ResponseBody
	@RequestMapping(value="/serviceUse/confirmCode",method=RequestMethod.POST)
	public void confirmCode(String cn,HttpSession session, HttpServletResponse response,String cl_id) throws Exception {
		PrintWriter out = response.getWriter();
		response.setContentType("text/plain;charset=utf-8");
		if(session.getAttribute("authText").equals(cn)) {
			out.print(true);
			session.setAttribute("cl_id", cl_id);
		}else {
			out.print(false);
		}
		out.close();
	}
	
	@RequestMapping("/serviceUse/newPassword")
	public ModelAndView newPassword(ModelAndView mnv) throws Exception {
		String url ="serviceUse/newPassword";
		mnv.setViewName(url);
		return mnv;
	}
	
	@RequestMapping(value="/serviceUse/changePwd",method=RequestMethod.POST)
	public void changePwd(String cl_id, String cl_pwd, HttpServletResponse response, HttpServletRequest request) throws Exception {
		ChangePwdCommand cpc = new ChangePwdCommand();
		cpc.setCl_id(cl_id);
		cpc.setCl_pwd(cl_pwd);
		serviceUseService.modifyPwd(cpc);
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		out.println("<script>");
		out.println("alert('비밀번호가 변경되었습니다.')");
		out.println("window.location.href='"+request.getContextPath()+"/serviceUse/loginForm'");
		out.println("</script>");
	}
}
